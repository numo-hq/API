type Factory @entity {
  # factory address
  id: ID!

  # amount of lendgines created
  lendgineCount: BigInt!

  # all time transactions
  txCount: BigInt!
}

type Token @entity {
  # token address
  id: ID!

  # number of pools containing this token
  poolCount: BigInt!

  # all time transactions
  txCount: BigInt!
}

type Transaction @entity {
  # txn hash
  id: ID!

  # origin
  origin: Bytes!

  # block txn was included in
  blockNumber: BigInt!

  # timestamp txn was confirmed
  timestamp: BigInt!

  # gas used during txn execution
  gasLimit: BigInt!
  gasPrice: BigInt!

  # derived values
  mints: [Mint!]! @derivedFrom(field: "transaction")
  burns: [Burn!]! @derivedFrom(field: "transaction")
  deposits: [Deposit!]! @derivedFrom(field: "transaction")
  withdraws: [Withdraw!]! @derivedFrom(field: "transaction")
  accrueInterests: [AccrueInterest!]! @derivedFrom(field: "transaction")
  accruePositionInterest: [AccruePositionInterest!]! @derivedFrom(field: "transaction")
  collects: [Collect!]! @derivedFrom(field: "transaction")
  pairMints: [PairMint!]! @derivedFrom(field: "transaction")
  pairBurns: [PairBurn!]! @derivedFrom(field: "transaction")
  swaps: [Swap!]! @derivedFrom(field: "transaction")
}

type Lendgine @entity {
  # Address
  id: ID!

  # immutables
  token0: Token!
  token1: Token!
  token0Exp: BigInt!
  token1Exp: BigInt!
  upperBound: BigInt!

  # storage data
  totalPositionSize: BigInt!
  totalLiquidityBorrowed: BigInt!
  rewardPerPositionStored: BigInt!
  lastUpdate: BigInt!
  totalSupply: BigInt!
  totalLiquidity: BigInt!
  reserve0: BigInt!
  reserve1: BigInt!

  # all time transactions
  txCount: BigInt!

  # derived values
  mints: [Mint!]! @derivedFrom(field: "lendgine")
  burns: [Burn!]! @derivedFrom(field: "lendgine")
  deposits: [Deposit!]! @derivedFrom(field: "lendgine")
  withdraws: [Withdraw!]! @derivedFrom(field: "lendgine")
  accrueInterests: [AccrueInterest!]! @derivedFrom(field: "lendgine")
  accruePositionInterest: [AccruePositionInterest!]! @derivedFrom(field: "lendgine")
  collects: [Collect!]! @derivedFrom(field: "lendgine")
  pairMints: [PairMint!]! @derivedFrom(field: "lendgine")
  pairBurns: [PairBurn!]! @derivedFrom(field: "lendgine")
  swaps: [Swap!]! @derivedFrom(field: "lendgine")
}

type Mint @entity {
  # transaction hash + "#" + index in mints Transaction array
  id: ID!

  # which txn the mint was included in
  transaction: Transaction!

  # The lendgine the position is in
  lendgine: Lendgine!

  sender: Bytes!
  recipient: Bytes!

  collateral: BigInt!
  liquidity: BigInt!
  shares: BigInt!

  # order within the txn
  logIndex: BigInt
}

type Burn @entity {
  # transaction hash + "#" + index in burns Transaction array
  id: ID!

  # which txn the burn was included in
  transaction: Transaction!

  # The lendgine the position is in
  lendgine: Lendgine!

  sender: Bytes!
  recipient: Bytes!

  collateral: BigInt!
  liquidity: BigInt!
  shares: BigInt!

  # order within the txn
  logIndex: BigInt
}

type Deposit @entity {
  # transaction hash + "#" + index in deposits Transaction array
  id: ID!

  # which txn the deposit was included in
  transaction: Transaction!

  # The lendgine the position is in
  lendgine: Lendgine!

  sender: Bytes!
  recipient: Bytes!

  liquidity: BigInt!
  size: BigInt!

  # order within the txn
  logIndex: BigInt
}

type Withdraw @entity {
  # transaction hash + "#" + index in withdraws Transaction array
  id: ID!

  # which txn the withdraw was included in
  transaction: Transaction!

  # The lendgine the position is in
  lendgine: Lendgine!

  sender: Bytes!
  recipient: Bytes!

  liquidity: BigInt!
  size: BigInt!

  # order within the txn
  logIndex: BigInt
}

type AccrueInterest @entity {
  # transaction hash + "#" + index in accrueInterests Transaction array
  id: ID!

  # which txn the accrueInterest was included in
  transaction: Transaction!

  # The lendgine the position is in
  lendgine: Lendgine!

  timeElapsed: BigInt!
  collateral: BigInt!
  liquidity: BigInt!

  # order within the txn
  logIndex: BigInt
}

type AccruePositionInterest @entity {
  # transaction hash + "#" + index in accruePositionInterests Transaction array
  id: ID!

  # which txn the accruePositionInterest was included in
  transaction: Transaction!

  # The lendgine the position is in
  lendgine: Lendgine!

  owner: Bytes!

  rewardPerPosition: BigInt!

  # order within the txn
  logIndex: BigInt
}

type Collect @entity {
  # transaction hash + "#" + index in collects Transaction array
  id: ID!

  # which txn the collect was included in
  transaction: Transaction!

  # The lendgine the position is in
  lendgine: Lendgine!

  owner: Bytes!
  recipient: Bytes!

  amount: BigInt!

  # order within the txn
  logIndex: BigInt
}

type PairMint @entity {
  # transaction hash + "#" + index in pairMints Transaction array
  id: ID!

  # which txn the pairMint was included in
  transaction: Transaction!

  # The lendgine the position is in
  lendgine: Lendgine!

  amount0: BigInt!
  amount1: BigInt!
  liquidity: BigInt!

  # order within the txn
  logIndex: BigInt
}

type PairBurn @entity {
  # transaction hash + "#" + index in pairBurns Transaction array
  id: ID!

  # which txn the pairBurn was included in
  transaction: Transaction!

  # The lendgine the position is in
  lendgine: Lendgine!

  recipient: Bytes!
  amount0: BigInt!
  amount1: BigInt!
  liquidity: BigInt!

  # order within the txn
  logIndex: BigInt
}

type Swap @entity {
  # transaction hash + "#" + index in swaps Transaction array
  id: ID!

  # which txn the swap was included in
  transaction: Transaction!

  # The lendgine the position is in
  lendgine: Lendgine!

  recipient: Bytes!
  amount0In: BigInt!
  amount1In: BigInt!
  amount0Out: BigInt!
  amount1Out: BigInt!

  # order within the txn
  logIndex: BigInt
}
